From ee5741c5d4d739c028e7eaa5310fbd0d04d6c8cc Mon Sep 17 00:00:00 2001
From: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
Date: Mon, 16 Aug 2021 01:07:50 +0300
Subject: [PATCH] media: i2c: ar0147: support DVP

This supports DVP with max9286 simple (custom) setup

Signed-off-by: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
---
 drivers/media/i2c/soc_camera/ar0147.c | 61 +++++++++++++++++++++++++++++------
 drivers/media/i2c/soc_camera/ar0147.h | 18 +++++++----
 drivers/media/i2c/soc_camera/ar0147_custom.h | 605 +++++++++++++++++++++++++++
 3 files changed, 668 insertions(+), 16 deletions(-)
 create mode 100644 drivers/media/i2c/soc_camera/ar0147_custom.h

diff --git a/drivers/media/i2c/soc_camera/ar0147.c b/drivers/media/i2c/soc_camera/ar0147.c
index 48e627d..0647fe4 100644
--- a/drivers/media/i2c/soc_camera/ar0147.c
+++ b/drivers/media/i2c/soc_camera/ar0147.c
@@ -41,6 +41,7 @@ struct ar0147_priv {
 	int				fps_numerator;
 	int				init_complete;
 	u8				id[6];
+	bool				emb_enable;
 	/* serializers */
 	int				max9286_addr;
 	int				max9271_addr;
@@ -177,7 +178,7 @@ static int ar0147_set_window(struct v4l2_subdev *sd)
 	/* vert crop start */
 	reg16_write16(client, 0x3002, priv->rect.top + AR0147_Y_START);
 	/* vert crop end */
-	reg16_write16(client, 0x3006, priv->rect.top + priv->rect.height - 1 + AR0147_Y_START);
+	reg16_write16(client, 0x3006, priv->rect.top + priv->rect.height + 1 + AR0147_Y_START);
 
 	return 0;
 };
@@ -296,12 +297,18 @@ static int ar0147_get_selection(struct v4l2_subdev *sd,
 	case V4L2_SEL_TGT_CROP_DEFAULT:
 		sel->r.left = 0;
 		sel->r.top = 0;
-		sel->r.width = AR0147_MAX_WIDTH;
-		sel->r.height = AR0147_MAX_HEIGHT;
+		sel->r.width = AR0147_DEFAULT_WIDTH;
+		sel->r.height = AR0147_DEFAULT_HEIGHT;
 		return 0;
 	case V4L2_SEL_TGT_CROP:
 		sel->r = priv->rect;
 		return 0;
+	case V4L2_SEL_TGT_COMPOSE_BOUNDS:
+		sel->r.left = 0;
+		sel->r.top = AR0147_EMB_PADDED;
+		sel->r.width = priv->rect.width;
+		sel->r.height = priv->rect.height;
+		return 0;
 	default:
 		return -EINVAL;
 	}
@@ -341,6 +348,7 @@ static int ar0147_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *parms)
 	struct v4l2_captureparm *cp = &parms->parm.capture;
 	int ret = 0;
 	int tmp_addr;
+	int vts;
 
 	if (parms->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
 		return -EINVAL;
@@ -349,15 +357,15 @@ static int ar0147_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *parms)
 
 	if (priv->fps_denominator != cp->timeperframe.denominator ||
 	    priv->fps_numerator != cp->timeperframe.numerator) {
-		priv->vts = (AR0147_SENSOR_HEIGHT + 226) * 30 * cp->timeperframe.numerator / cp->timeperframe.denominator;
+		vts = priv->vts * 30 * cp->timeperframe.numerator / cp->timeperframe.denominator;
 
-		ret = reg16_write16(client, 0x300A, priv->vts);		/* FRAME_LENGTH_LINES_ */
+		ret = reg16_write16(client, 0x300A, vts);		/* FRAME_LENGTH_LINES_ */
 
 		tmp_addr = client->addr;
 		if (priv->max9271_addr) {
 			client->addr = priv->max9271_addr;		/* Serializer I2C address */
-			reg8_write(client, 0x58, priv->vts >> 8);	/* HS count */
-			reg8_write(client, 0x59, priv->vts & 0xff);
+			reg8_write(client, 0x58, vts >> 8);	/* HS count */
+			reg8_write(client, 0x59, vts & 0xff);
 		}
 		client->addr = tmp_addr;
 
@@ -531,7 +539,35 @@ static ssize_t ar0147_otp_id_show(struct device *dev,
 			priv->id[0], priv->id[1], priv->id[2], priv->id[3], priv->id[4], priv->id[5]);
 }
 
+static ssize_t ar0147_emb_enable_store(struct device *dev,
+				       struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(to_i2c_client(dev));
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ar0147_priv *priv = to_ar0147(client);
+	u32 val;
+
+	if (sscanf(buf, "%u\n", &val) != 1)
+		return -EINVAL;
+	priv->emb_enable = !!val;
+
+	reg16_write16(client, 0x3064, priv->emb_enable ? 0x1982 : 0x1802);
+
+	return count;
+}
+
+static ssize_t ar0147_emb_enable_show(struct device *dev,
+			      struct device_attribute *attr, char *buf)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(to_i2c_client(dev));
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ar0147_priv *priv = to_ar0147(client);
+
+	return snprintf(buf, 4, "%d\n", priv->emb_enable);
+}
+
 static DEVICE_ATTR(otp_id_ar0147, S_IRUGO, ar0147_otp_id_show, NULL);
+static DEVICE_ATTR(emb_enable_ar0147, S_IRUGO|S_IWUSR, ar0147_emb_enable_show, ar0147_emb_enable_store);
 
 static int ar0147_initialize(struct i2c_client *client)
 {
@@ -580,6 +616,8 @@ static int ar0147_initialize(struct i2c_client *client)
 				ar0147_set_regs(client, ar0147_regs_seplus1_mipi450mbps_12bit_30fps_rev3);
 			else if (strcmp(mode, "seplus2") == 0)
 				ar0147_set_regs(client, ar0147_regs_seplus2_mipi450mbps_12bit_30fps_rev3);
+			else if (strcmp(mode, "custom") == 0)
+				ar0147_set_regs(client, ar0147_regs_setup_custom);
 			else
 				dev_err(&client->dev, "Unsupported mode %s\n", mode);
 			break;
@@ -718,6 +756,7 @@ static int ar0147_probe(struct i2c_client *client,
 	priv->sd.flags = V4L2_SUBDEV_FL_HAS_DEVNODE;
 	priv->fps_numerator = 1;
 	priv->fps_denominator = 30;
+	priv->emb_enable = 1;
 	mutex_init(&priv->lock);
 
 	v4l2_ctrl_handler_init(&priv->hdl, 4);
@@ -769,14 +808,15 @@ static int ar0147_probe(struct i2c_client *client,
 
 	priv->rect.left = 0;
 	priv->rect.top = 0;
-	priv->rect.width = AR0147_MAX_WIDTH;
-	priv->rect.height = AR0147_MAX_HEIGHT;
+	priv->rect.width = AR0147_DEFAULT_WIDTH;
+	priv->rect.height = AR0147_DEFAULT_HEIGHT;
 
 	ret = v4l2_async_register_subdev(&priv->sd);
 	if (ret)
 		goto cleanup;
 
-	if (device_create_file(&client->dev, &dev_attr_otp_id_ar0147) != 0) {
+	if (device_create_file(&client->dev, &dev_attr_otp_id_ar0147) != 0||
+	    device_create_file(&client->dev, &dev_attr_emb_enable_ar0147) != 0) {
 		dev_err(&client->dev, "sysfs otp_id entry creation failed\n");
 		goto cleanup;
 	}
@@ -801,6 +841,7 @@ static int ar0147_remove(struct i2c_client *client)
 	struct ar0147_priv *priv = i2c_get_clientdata(client);
 
 	device_remove_file(&client->dev, &dev_attr_otp_id_ar0147);
+	device_remove_file(&client->dev, &dev_attr_emb_enable_ar0147);
 	v4l2_async_unregister_subdev(&priv->sd);
 	media_entity_cleanup(&priv->sd.entity);
 	v4l2_ctrl_handler_free(&priv->hdl);
diff --git a/drivers/media/i2c/soc_camera/ar0147.h b/drivers/media/i2c/soc_camera/ar0147.h
index 2963708..e4d7db3 100644
--- a/drivers/media/i2c/soc_camera/ar0147.h
+++ b/drivers/media/i2c/soc_camera/ar0147.h
@@ -14,18 +14,23 @@
 
 //#define AR0147_EMBEDDED_LINE
 
-#define AR0147_MAX_WIDTH	1344
-#define AR0147_MAX_HEIGHT	968
+#define AR0147_DEFAULT_WIDTH	1280
+#define AR0147_DEFAULT_HEIGHT	960
+
+#define AR0147_EMB_LINES	8
+#define AR0147_EMB_PADDED	(priv->emb_enable ? AR0147_EMB_LINES + 30 : 0) /* embedded data (SOF) and stats (EOF) + post padding */
 
 #define AR0147_DELAY		0xffff
 
+#define AR0147_MAX_WIDTH	1344
+#define AR0147_MAX_HEIGHT	968
 #define AR0147_SENSOR_WIDTH	1344
 #define AR0147_SENSOR_HEIGHT	968
 
-#define AR0147_X_START		((AR0147_SENSOR_WIDTH - AR0147_MAX_WIDTH) / 2)
-#define AR0147_Y_START		((AR0147_SENSOR_HEIGHT - AR0147_MAX_HEIGHT) / 2)
-#define AR0147_X_END		(AR0147_X_START + AR0147_MAX_WIDTH - 1)
-#define AR0147_Y_END		(AR0147_Y_START + AR0147_MAX_HEIGHT - 1)
+#define AR0147_X_START		((AR0147_SENSOR_WIDTH - AR0147_DEFAULT_WIDTH) / 2)
+#define AR0147_Y_START		((AR0147_SENSOR_HEIGHT - AR0147_DEFAULT_HEIGHT) / 2)
+#define AR0147_X_END		(AR0147_X_START + AR0147_DEFAULT_WIDTH - 1)
+#define AR0147_Y_END		(AR0147_Y_START + AR0147_DEFAULT_HEIGHT - 1)
 
 struct ar0147_reg {
 	u16	reg;
@@ -35,3 +40,4 @@ struct ar0147_reg {
 #include "ar0147_rev1.h"
 #include "ar0147_rev2.h"
 #include "ar0147_rev3.h"
+#include "ar0147_custom.h"
diff --git a/drivers/media/i2c/soc_camera/ar0147_custom.h b/drivers/media/i2c/soc_camera/ar0147_custom.h
new file mode 100644
index 0000000..6ed2eeb
--- /dev/null
+++ b/drivers/media/i2c/soc_camera/ar0147_custom.h
@@ -0,0 +1,605 @@
+/*3
+ * ON Semiconductor AR0147 sensor camera wizard 1344x968@30/BGGR/BT601/RAW12
+ *
+ * Copyright (C) 2021 Cogent Embedded, Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+/* Super-Exposure + T2 Full Resolution Parallel 50MHz PixClk 29.4FPS 27MHz Extclk */
+static const struct ar0147_reg ar0147_rev3_setup_dvp_custom[] = {
+//{0x301A, 0x0001},	// reset (broken)
+//{AR0147_DELAY, 100},
+{0x301A, 0x10D8},	// Stream off and setup parallel
+{0x3070, 0x0001},
+{0x3070, 0x0000},	//  1: Solid color test pattern,
+			//  2: Full color bar test pattern,
+			//  3: Fade to grey color bar test pattern,
+			//256: Walking 1 test pattern (12 bit)
+#ifdef AR0147_DISPLAY_PATTERN_FIXED
+{0x3070, 0x0001},
+#endif
+{0x3072, 0x0fff},	// R
+{0x3074, 0x0fff},	// G(GR row)
+{0x3076, 0x0fff},	// B
+{0x3078, 0x0fff},	// G(GB row)
+#ifdef AR0147_DISPLAY_PATTERN_COLOR_BAR
+{0x3070, 0x0002},
+#endif
+{AR0147_DELAY, 10},
+// start demo init
+{0x3500, 0x0100}, //DAC_LD_0_1
+{0x3C0C, 0x0518}, //DELAY_BUFFER_LLPCK_RD_WR_OVERLAP
+{0x3092, 0x1A24}, //ROW_NOISE_CONTROL
+{0x30B4, 0x01C7}, //TEMPSENS0_CTRL_REG
+{0x33EE, 0x0344}, //TEST_CTRL
+{0x350C, 0x035A}, //DAC_LD_12_13
+{0x350E, 0x0514}, //DAC_LD_14_15
+{0x3518, 0x14FE}, //DAC_LD_24_25
+{0x351A, 0x6000}, //DAC_LD_26_27
+{0x3520, 0x08CC}, //DAC_LD_32_33
+{0x3522, 0xCC08}, //DAC_LD_34_35
+{0x3524, 0x0C00}, //DAC_LD_36_37
+{0x3526, 0x0F00}, //DAC_LD_38_39
+{0x3528, 0xEEEE}, //DAC_LD_40_41
+{0x352A, 0x089F}, //DAC_LD_42_43
+{0x352C, 0x0012}, //DAC_LD_44_45
+{0x352E, 0x00EE}, //DAC_LD_46_47
+{0x3530, 0xEE00}, //DAC_LD_48_49
+{0x3536, 0xFF20}, //DAC_LD_54_55
+{0x3538, 0x3CFF}, //DAC_LD_56_57
+{0x353A, 0x9000}, //DAC_LD_58_59
+{0x353C, 0x7F00}, //DAC_LD_60_61
+{0x3540, 0xC62C}, //DAC_LD_64_65
+{0x3542, 0x4B4B}, //DAC_LD_66_67
+{0x3544, 0x3C46}, //DAC_LD_68_69
+{0x3546, 0x5A5A}, //DAC_LD_70_71
+{0x3548, 0x6400}, //DAC_LD_72_73
+{0x354A, 0x007F}, //DAC_LD_74_75
+{0x3556, 0x1010}, //DAC_LD_86_87
+{0x3566, 0x7328}, //DAC_LD_102_103
+{0x3F90, 0x0800}, //TEMPVSENS0_TMG_CTRL
+{0x3510, 0x011F}, //DAC_LD_16_17
+{0x353E, 0x801F}, //DAC_LD_62_63
+{0x3F9A, 0x0001}, //TEMPVSENS0_BOOST_SAMP_CTRL
+{0x3116, 0x0001}, //HDR_CONTROL3
+{0x3102, 0x60A0}, //DLO_CONTROL1
+{0x3104, 0x60A0}, //DLO_CONTROL2
+{0x3106, 0x60A0}, //DLO_CONTROL3
+{0x31E0, 0x0003}, //PIX_DEF_ID
+{0x2512, 0x8000}, //SEQ_CTRL_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x3350}, //SEQ_DATA_PORT
+{0x2510, 0x2004}, //SEQ_DATA_PORT
+{0x2510, 0x1420}, //SEQ_DATA_PORT
+{0x2510, 0x1578}, //SEQ_DATA_PORT
+{0x2510, 0x087B}, //SEQ_DATA_PORT
+{0x2510, 0x24FF}, //SEQ_DATA_PORT
+{0x2510, 0x24FF}, //SEQ_DATA_PORT
+{0x2510, 0x24EA}, //SEQ_DATA_PORT
+{0x2510, 0x2410}, //SEQ_DATA_PORT
+{0x2510, 0x2224}, //SEQ_DATA_PORT
+{0x2510, 0x1015}, //SEQ_DATA_PORT
+{0x2510, 0xD813}, //SEQ_DATA_PORT
+{0x2510, 0x0214}, //SEQ_DATA_PORT
+{0x2510, 0x0024}, //SEQ_DATA_PORT
+{0x2510, 0xFF24}, //SEQ_DATA_PORT
+{0x2510, 0xFF24}, //SEQ_DATA_PORT
+{0x2510, 0xEA23}, //SEQ_DATA_PORT
+{0x2510, 0x2464}, //SEQ_DATA_PORT
+{0x2510, 0x7A24}, //SEQ_DATA_PORT
+{0x2510, 0x0405}, //SEQ_DATA_PORT
+{0x2510, 0x2C40}, //SEQ_DATA_PORT
+{0x2510, 0x0AFF}, //SEQ_DATA_PORT
+{0x2510, 0x0A78}, //SEQ_DATA_PORT
+{0x2510, 0x3851}, //SEQ_DATA_PORT
+{0x2510, 0x2A54}, //SEQ_DATA_PORT
+{0x2510, 0x1440}, //SEQ_DATA_PORT
+{0x2510, 0x0015}, //SEQ_DATA_PORT
+{0x2510, 0x0804}, //SEQ_DATA_PORT
+{0x2510, 0x0801}, //SEQ_DATA_PORT
+{0x2510, 0x0408}, //SEQ_DATA_PORT
+{0x2510, 0x2652}, //SEQ_DATA_PORT
+{0x2510, 0x0813}, //SEQ_DATA_PORT
+{0x2510, 0xC810}, //SEQ_DATA_PORT
+{0x2510, 0x0210}, //SEQ_DATA_PORT
+{0x2510, 0x1611}, //SEQ_DATA_PORT
+{0x2510, 0x8111}, //SEQ_DATA_PORT
+{0x2510, 0x8910}, //SEQ_DATA_PORT
+{0x2510, 0x5612}, //SEQ_DATA_PORT
+{0x2510, 0x1009}, //SEQ_DATA_PORT
+{0x2510, 0x020D}, //SEQ_DATA_PORT
+{0x2510, 0x0903}, //SEQ_DATA_PORT
+{0x2510, 0x1402}, //SEQ_DATA_PORT
+{0x2510, 0x15A8}, //SEQ_DATA_PORT
+{0x2510, 0x1388}, //SEQ_DATA_PORT
+{0x2510, 0x0938}, //SEQ_DATA_PORT
+{0x2510, 0x1199}, //SEQ_DATA_PORT
+{0x2510, 0x11D9}, //SEQ_DATA_PORT
+{0x2510, 0x091E}, //SEQ_DATA_PORT
+{0x2510, 0x1214}, //SEQ_DATA_PORT
+{0x2510, 0x10D6}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x1210}, //SEQ_DATA_PORT
+{0x2510, 0x1212}, //SEQ_DATA_PORT
+{0x2510, 0x1210}, //SEQ_DATA_PORT
+{0x2510, 0x11DD}, //SEQ_DATA_PORT
+{0x2510, 0x11D9}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x1441}, //SEQ_DATA_PORT
+{0x2510, 0x0904}, //SEQ_DATA_PORT
+{0x2510, 0x1056}, //SEQ_DATA_PORT
+{0x2510, 0x0811}, //SEQ_DATA_PORT
+{0x2510, 0xDB09}, //SEQ_DATA_PORT
+{0x2510, 0x0311}, //SEQ_DATA_PORT
+{0x2510, 0xFB11}, //SEQ_DATA_PORT
+{0x2510, 0xBB12}, //SEQ_DATA_PORT
+{0x2510, 0x1A12}, //SEQ_DATA_PORT
+{0x2510, 0x1008}, //SEQ_DATA_PORT
+{0x2510, 0x1250}, //SEQ_DATA_PORT
+{0x2510, 0x0B10}, //SEQ_DATA_PORT
+{0x2510, 0x7610}, //SEQ_DATA_PORT
+{0x2510, 0xE614}, //SEQ_DATA_PORT
+{0x2510, 0x6109}, //SEQ_DATA_PORT
+{0x2510, 0x0612}, //SEQ_DATA_PORT
+{0x2510, 0x4012}, //SEQ_DATA_PORT
+{0x2510, 0x6009}, //SEQ_DATA_PORT
+{0x2510, 0x1C14}, //SEQ_DATA_PORT
+{0x2510, 0x6009}, //SEQ_DATA_PORT
+{0x2510, 0x1215}, //SEQ_DATA_PORT
+{0x2510, 0xC813}, //SEQ_DATA_PORT
+{0x2510, 0xC808}, //SEQ_DATA_PORT
+{0x2510, 0x1066}, //SEQ_DATA_PORT
+{0x2510, 0x090B}, //SEQ_DATA_PORT
+{0x2510, 0x1588}, //SEQ_DATA_PORT
+{0x2510, 0x1388}, //SEQ_DATA_PORT
+{0x2510, 0x0913}, //SEQ_DATA_PORT
+{0x2510, 0x0C14}, //SEQ_DATA_PORT
+{0x2510, 0x4009}, //SEQ_DATA_PORT
+{0x2510, 0x0310}, //SEQ_DATA_PORT
+{0x2510, 0xE611}, //SEQ_DATA_PORT
+{0x2510, 0xFB12}, //SEQ_DATA_PORT
+{0x2510, 0x6212}, //SEQ_DATA_PORT
+{0x2510, 0x6011}, //SEQ_DATA_PORT
+{0x2510, 0xFF11}, //SEQ_DATA_PORT
+{0x2510, 0xFB14}, //SEQ_DATA_PORT
+{0x2510, 0x4109}, //SEQ_DATA_PORT
+{0x2510, 0x0210}, //SEQ_DATA_PORT
+{0x2510, 0x6609}, //SEQ_DATA_PORT
+{0x2510, 0x1211}, //SEQ_DATA_PORT
+{0x2510, 0xBB12}, //SEQ_DATA_PORT
+{0x2510, 0x6312}, //SEQ_DATA_PORT
+{0x2510, 0x6014}, //SEQ_DATA_PORT
+{0x2510, 0x0015}, //SEQ_DATA_PORT
+{0x2510, 0x1811}, //SEQ_DATA_PORT
+{0x2510, 0xB812}, //SEQ_DATA_PORT
+{0x2510, 0xA012}, //SEQ_DATA_PORT
+{0x2510, 0x0010}, //SEQ_DATA_PORT
+{0x2510, 0x2610}, //SEQ_DATA_PORT
+{0x2510, 0x0013}, //SEQ_DATA_PORT
+{0x2510, 0x0011}, //SEQ_DATA_PORT
+{0x2510, 0x0030}, //SEQ_DATA_PORT
+{0x2510, 0x5342}, //SEQ_DATA_PORT
+{0x2510, 0x1100}, //SEQ_DATA_PORT
+{0x2510, 0x1002}, //SEQ_DATA_PORT
+{0x2510, 0x1016}, //SEQ_DATA_PORT
+{0x2510, 0x1101}, //SEQ_DATA_PORT
+{0x2510, 0x1109}, //SEQ_DATA_PORT
+{0x2510, 0x1056}, //SEQ_DATA_PORT
+{0x2510, 0x1210}, //SEQ_DATA_PORT
+{0x2510, 0x0D09}, //SEQ_DATA_PORT
+{0x2510, 0x0314}, //SEQ_DATA_PORT
+{0x2510, 0x0214}, //SEQ_DATA_PORT
+{0x2510, 0x4309}, //SEQ_DATA_PORT
+{0x2510, 0x0514}, //SEQ_DATA_PORT
+{0x2510, 0x4009}, //SEQ_DATA_PORT
+{0x2510, 0x0115}, //SEQ_DATA_PORT
+{0x2510, 0xC813}, //SEQ_DATA_PORT
+{0x2510, 0xC809}, //SEQ_DATA_PORT
+{0x2510, 0x1A11}, //SEQ_DATA_PORT
+{0x2510, 0x4909}, //SEQ_DATA_PORT
+{0x2510, 0x0815}, //SEQ_DATA_PORT
+{0x2510, 0x8813}, //SEQ_DATA_PORT
+{0x2510, 0x8809}, //SEQ_DATA_PORT
+{0x2510, 0x1B11}, //SEQ_DATA_PORT
+{0x2510, 0x5909}, //SEQ_DATA_PORT
+{0x2510, 0x0B12}, //SEQ_DATA_PORT
+{0x2510, 0x1409}, //SEQ_DATA_PORT
+{0x2510, 0x0112}, //SEQ_DATA_PORT
+{0x2510, 0x1010}, //SEQ_DATA_PORT
+{0x2510, 0xD612}, //SEQ_DATA_PORT
+{0x2510, 0x1212}, //SEQ_DATA_PORT
+{0x2510, 0x1011}, //SEQ_DATA_PORT
+{0x2510, 0x5D11}, //SEQ_DATA_PORT
+{0x2510, 0x5910}, //SEQ_DATA_PORT
+{0x2510, 0x5609}, //SEQ_DATA_PORT
+{0x2510, 0x0311}, //SEQ_DATA_PORT
+{0x2510, 0x5B08}, //SEQ_DATA_PORT
+{0x2510, 0x1441}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x1440}, //SEQ_DATA_PORT
+{0x2510, 0x090C}, //SEQ_DATA_PORT
+{0x2510, 0x117B}, //SEQ_DATA_PORT
+{0x2510, 0x113B}, //SEQ_DATA_PORT
+{0x2510, 0x121A}, //SEQ_DATA_PORT
+{0x2510, 0x1210}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x1250}, //SEQ_DATA_PORT
+{0x2510, 0x10F6}, //SEQ_DATA_PORT
+{0x2510, 0x10E6}, //SEQ_DATA_PORT
+{0x2510, 0x1460}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x15A8}, //SEQ_DATA_PORT
+{0x2510, 0x13A8}, //SEQ_DATA_PORT
+{0x2510, 0x1240}, //SEQ_DATA_PORT
+{0x2510, 0x1260}, //SEQ_DATA_PORT
+{0x2510, 0x0924}, //SEQ_DATA_PORT
+{0x2510, 0x1588}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x1066}, //SEQ_DATA_PORT
+{0x2510, 0x0B08}, //SEQ_DATA_PORT
+{0x2510, 0x1388}, //SEQ_DATA_PORT
+{0x2510, 0x0925}, //SEQ_DATA_PORT
+{0x2510, 0x0C09}, //SEQ_DATA_PORT
+{0x2510, 0x0214}, //SEQ_DATA_PORT
+{0x2510, 0x4009}, //SEQ_DATA_PORT
+{0x2510, 0x0710}, //SEQ_DATA_PORT
+{0x2510, 0xE612}, //SEQ_DATA_PORT
+{0x2510, 0x6212}, //SEQ_DATA_PORT
+{0x2510, 0x6011}, //SEQ_DATA_PORT
+{0x2510, 0x7F11}, //SEQ_DATA_PORT
+{0x2510, 0x7B10}, //SEQ_DATA_PORT
+{0x2510, 0x6609}, //SEQ_DATA_PORT
+{0x2510, 0x0614}, //SEQ_DATA_PORT
+{0x2510, 0x4109}, //SEQ_DATA_PORT
+{0x2510, 0x0114}, //SEQ_DATA_PORT
+{0x2510, 0x4009}, //SEQ_DATA_PORT
+{0x2510, 0x0D11}, //SEQ_DATA_PORT
+{0x2510, 0x3B12}, //SEQ_DATA_PORT
+{0x2510, 0x6312}, //SEQ_DATA_PORT
+{0x2510, 0x6014}, //SEQ_DATA_PORT
+{0x2510, 0x0015}, //SEQ_DATA_PORT
+{0x2510, 0x1811}, //SEQ_DATA_PORT
+{0x2510, 0x3812}, //SEQ_DATA_PORT
+{0x2510, 0xA012}, //SEQ_DATA_PORT
+{0x2510, 0x0010}, //SEQ_DATA_PORT
+{0x2510, 0x2610}, //SEQ_DATA_PORT
+{0x2510, 0x0013}, //SEQ_DATA_PORT
+{0x2510, 0x0011}, //SEQ_DATA_PORT
+{0x2510, 0x0043}, //SEQ_DATA_PORT
+{0x2510, 0x7A06}, //SEQ_DATA_PORT
+{0x2510, 0x0507}, //SEQ_DATA_PORT
+{0x2510, 0x410E}, //SEQ_DATA_PORT
+{0x2510, 0x0237}, //SEQ_DATA_PORT
+{0x2510, 0x502C}, //SEQ_DATA_PORT
+{0x2510, 0x4414}, //SEQ_DATA_PORT
+{0x2510, 0x4000}, //SEQ_DATA_PORT
+{0x2510, 0x1508}, //SEQ_DATA_PORT
+{0x2510, 0x0408}, //SEQ_DATA_PORT
+{0x2510, 0x0104}, //SEQ_DATA_PORT
+{0x2510, 0x0826}, //SEQ_DATA_PORT
+{0x2510, 0x5508}, //SEQ_DATA_PORT
+{0x2510, 0x13C8}, //SEQ_DATA_PORT
+{0x2510, 0x1002}, //SEQ_DATA_PORT
+{0x2510, 0x1016}, //SEQ_DATA_PORT
+{0x2510, 0x1181}, //SEQ_DATA_PORT
+{0x2510, 0x1189}, //SEQ_DATA_PORT
+{0x2510, 0x1056}, //SEQ_DATA_PORT
+{0x2510, 0x1210}, //SEQ_DATA_PORT
+{0x2510, 0x0902}, //SEQ_DATA_PORT
+{0x2510, 0x0D09}, //SEQ_DATA_PORT
+{0x2510, 0x0314}, //SEQ_DATA_PORT
+{0x2510, 0x0215}, //SEQ_DATA_PORT
+{0x2510, 0xA813}, //SEQ_DATA_PORT
+{0x2510, 0xA814}, //SEQ_DATA_PORT
+{0x2510, 0x0309}, //SEQ_DATA_PORT
+{0x2510, 0x0614}, //SEQ_DATA_PORT
+{0x2510, 0x0209}, //SEQ_DATA_PORT
+{0x2510, 0x1F15}, //SEQ_DATA_PORT
+{0x2510, 0x8813}, //SEQ_DATA_PORT
+{0x2510, 0x8809}, //SEQ_DATA_PORT
+{0x2510, 0x0B11}, //SEQ_DATA_PORT
+{0x2510, 0x9911}, //SEQ_DATA_PORT
+{0x2510, 0xD909}, //SEQ_DATA_PORT
+{0x2510, 0x1E12}, //SEQ_DATA_PORT
+{0x2510, 0x1409}, //SEQ_DATA_PORT
+{0x2510, 0x0312}, //SEQ_DATA_PORT
+{0x2510, 0x1012}, //SEQ_DATA_PORT
+{0x2510, 0x1212}, //SEQ_DATA_PORT
+{0x2510, 0x1011}, //SEQ_DATA_PORT
+{0x2510, 0xDD11}, //SEQ_DATA_PORT
+{0x2510, 0xD909}, //SEQ_DATA_PORT
+{0x2510, 0x0114}, //SEQ_DATA_PORT
+{0x2510, 0x4009}, //SEQ_DATA_PORT
+{0x2510, 0x0711}, //SEQ_DATA_PORT
+{0x2510, 0xDB09}, //SEQ_DATA_PORT
+{0x2510, 0x0311}, //SEQ_DATA_PORT
+{0x2510, 0xFB11}, //SEQ_DATA_PORT
+{0x2510, 0xBB12}, //SEQ_DATA_PORT
+{0x2510, 0x1A12}, //SEQ_DATA_PORT
+{0x2510, 0x1009}, //SEQ_DATA_PORT
+{0x2510, 0x0112}, //SEQ_DATA_PORT
+{0x2510, 0x500B}, //SEQ_DATA_PORT
+{0x2510, 0x1076}, //SEQ_DATA_PORT
+{0x2510, 0x1066}, //SEQ_DATA_PORT
+{0x2510, 0x1460}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x15C8}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x1240}, //SEQ_DATA_PORT
+{0x2510, 0x1260}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x13C8}, //SEQ_DATA_PORT
+{0x2510, 0x0956}, //SEQ_DATA_PORT
+{0x2510, 0x1588}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x0C14}, //SEQ_DATA_PORT
+{0x2510, 0x4009}, //SEQ_DATA_PORT
+{0x2510, 0x0511}, //SEQ_DATA_PORT
+{0x2510, 0xFB12}, //SEQ_DATA_PORT
+{0x2510, 0x6212}, //SEQ_DATA_PORT
+{0x2510, 0x6011}, //SEQ_DATA_PORT
+{0x2510, 0xFF11}, //SEQ_DATA_PORT
+{0x2510, 0xFB09}, //SEQ_DATA_PORT
+{0x2510, 0x1911}, //SEQ_DATA_PORT
+{0x2510, 0xBB12}, //SEQ_DATA_PORT
+{0x2510, 0x6312}, //SEQ_DATA_PORT
+{0x2510, 0x6014}, //SEQ_DATA_PORT
+{0x2510, 0x0015}, //SEQ_DATA_PORT
+{0x2510, 0x1811}, //SEQ_DATA_PORT
+{0x2510, 0xB812}, //SEQ_DATA_PORT
+{0x2510, 0xA012}, //SEQ_DATA_PORT
+{0x2510, 0x0010}, //SEQ_DATA_PORT
+{0x2510, 0x2610}, //SEQ_DATA_PORT
+{0x2510, 0x0013}, //SEQ_DATA_PORT
+{0x2510, 0x0011}, //SEQ_DATA_PORT
+{0x2510, 0x0030}, //SEQ_DATA_PORT
+{0x2510, 0x5345}, //SEQ_DATA_PORT
+{0x2510, 0x1444}, //SEQ_DATA_PORT
+{0x2510, 0x1002}, //SEQ_DATA_PORT
+{0x2510, 0x1016}, //SEQ_DATA_PORT
+{0x2510, 0x1101}, //SEQ_DATA_PORT
+{0x2510, 0x1109}, //SEQ_DATA_PORT
+{0x2510, 0x1056}, //SEQ_DATA_PORT
+{0x2510, 0x1210}, //SEQ_DATA_PORT
+{0x2510, 0x0D09}, //SEQ_DATA_PORT
+{0x2510, 0x0314}, //SEQ_DATA_PORT
+{0x2510, 0x0614}, //SEQ_DATA_PORT
+{0x2510, 0x4709}, //SEQ_DATA_PORT
+{0x2510, 0x0514}, //SEQ_DATA_PORT
+{0x2510, 0x4409}, //SEQ_DATA_PORT
+{0x2510, 0x0115}, //SEQ_DATA_PORT
+{0x2510, 0x9813}, //SEQ_DATA_PORT
+{0x2510, 0x9809}, //SEQ_DATA_PORT
+{0x2510, 0x1A11}, //SEQ_DATA_PORT
+{0x2510, 0x4909}, //SEQ_DATA_PORT
+{0x2510, 0x0815}, //SEQ_DATA_PORT
+{0x2510, 0x8813}, //SEQ_DATA_PORT
+{0x2510, 0x8809}, //SEQ_DATA_PORT
+{0x2510, 0x1B11}, //SEQ_DATA_PORT
+{0x2510, 0x5909}, //SEQ_DATA_PORT
+{0x2510, 0x0B12}, //SEQ_DATA_PORT
+{0x2510, 0x1409}, //SEQ_DATA_PORT
+{0x2510, 0x0112}, //SEQ_DATA_PORT
+{0x2510, 0x1009}, //SEQ_DATA_PORT
+{0x2510, 0x0112}, //SEQ_DATA_PORT
+{0x2510, 0x1212}, //SEQ_DATA_PORT
+{0x2510, 0x1011}, //SEQ_DATA_PORT
+{0x2510, 0x5D11}, //SEQ_DATA_PORT
+{0x2510, 0x5909}, //SEQ_DATA_PORT
+{0x2510, 0x0511}, //SEQ_DATA_PORT
+{0x2510, 0x5B09}, //SEQ_DATA_PORT
+{0x2510, 0x1311}, //SEQ_DATA_PORT
+{0x2510, 0x7B11}, //SEQ_DATA_PORT
+{0x2510, 0x3B12}, //SEQ_DATA_PORT
+{0x2510, 0x1A12}, //SEQ_DATA_PORT
+{0x2510, 0x1009}, //SEQ_DATA_PORT
+{0x2510, 0x0112}, //SEQ_DATA_PORT
+{0x2510, 0x5010}, //SEQ_DATA_PORT
+{0x2510, 0x7610}, //SEQ_DATA_PORT
+{0x2510, 0x6614}, //SEQ_DATA_PORT
+{0x2510, 0x6409}, //SEQ_DATA_PORT
+{0x2510, 0x0115}, //SEQ_DATA_PORT
+{0x2510, 0xA813}, //SEQ_DATA_PORT
+{0x2510, 0xA812}, //SEQ_DATA_PORT
+{0x2510, 0x4012}, //SEQ_DATA_PORT
+{0x2510, 0x6009}, //SEQ_DATA_PORT
+{0x2510, 0x2015}, //SEQ_DATA_PORT
+{0x2510, 0x8809}, //SEQ_DATA_PORT
+{0x2510, 0x020B}, //SEQ_DATA_PORT
+{0x2510, 0x0901}, //SEQ_DATA_PORT
+{0x2510, 0x1388}, //SEQ_DATA_PORT
+{0x2510, 0x0925}, //SEQ_DATA_PORT
+{0x2510, 0x0C09}, //SEQ_DATA_PORT
+{0x2510, 0x0214}, //SEQ_DATA_PORT
+{0x2510, 0x4409}, //SEQ_DATA_PORT
+{0x2510, 0x0912}, //SEQ_DATA_PORT
+{0x2510, 0x6212}, //SEQ_DATA_PORT
+{0x2510, 0x6011}, //SEQ_DATA_PORT
+{0x2510, 0x7F11}, //SEQ_DATA_PORT
+{0x2510, 0x7B09}, //SEQ_DATA_PORT
+{0x2510, 0x1C11}, //SEQ_DATA_PORT
+{0x2510, 0x3B12}, //SEQ_DATA_PORT
+{0x2510, 0x6312}, //SEQ_DATA_PORT
+{0x2510, 0x6014}, //SEQ_DATA_PORT
+{0x2510, 0x0015}, //SEQ_DATA_PORT
+{0x2510, 0x1811}, //SEQ_DATA_PORT
+{0x2510, 0x3812}, //SEQ_DATA_PORT
+{0x2510, 0xA012}, //SEQ_DATA_PORT
+{0x2510, 0x0010}, //SEQ_DATA_PORT
+{0x2510, 0x2610}, //SEQ_DATA_PORT
+{0x2510, 0x0013}, //SEQ_DATA_PORT
+{0x2510, 0x0011}, //SEQ_DATA_PORT
+{0x2510, 0x0008}, //SEQ_DATA_PORT
+{0x2510, 0x7A06}, //SEQ_DATA_PORT
+{0x2510, 0x0508}, //SEQ_DATA_PORT
+{0x2510, 0x070E}, //SEQ_DATA_PORT
+{0x2510, 0x0237}, //SEQ_DATA_PORT
+{0x2510, 0x502C}, //SEQ_DATA_PORT
+{0x2510, 0xFE32}, //SEQ_DATA_PORT
+{0x2510, 0xFE06}, //SEQ_DATA_PORT
+{0x2510, 0x2C2C}, //SEQ_DATA_PORT
+//{AR0147_DELAY, 200},
+{0x32E6, 0x009A}, //MIN_SUBROW
+{0x322E, 0x258C}, //CLKS_PER_SAMPLE
+{0x32D0, 0x3A02}, //SHUT_RST
+{0x32D2, 0x3508}, //SHUT_TX
+{0x32D4, 0x3702}, //SHUT_DCG
+{0x32D6, 0x3C04}, //SHUT_RST_BOOST
+{0x32DC, 0x370A}, //SHUT_TX_BOOST
+{0x32EA, 0x3CA8}, //SHUT_CTRL
+{0x351E, 0x0000}, //DAC_LD_30_31
+{0x3510, 0x811F}, //DAC_LD_16_17
+{0x32EA, 0x3C0E}, //SHUT_CTRL
+{0x3116, 0x0001}, //HDR_CONTROL3
+{0x3088, 0x0400}, //LFM_CTRL
+{0x3C06, 0x141C}, //CONFIGURE_BUFFERS1
+{0x3C08, 0x2114}, //CONFIGURE_BUFFERS2
+{0x3088, 0x0400}, //LFM_CTRL
+{0x32EC, 0x7107}, //SHUT_CTRL2
+{0x33E2, 0x0530}, //SAMPLE_CTRL
+{0x322A, 0x0939}, //FINE_INTEGRATION_CTRL
+{0x1008, 0x0271}, //FINE_INTEGRATION_TIME_MIN
+{0x1010, 0x0129}, //FINE_INTEGRATION_TIME4_MIN
+{0x3230, 0x020F}, //FINE_CORRECTION
+{0x3236, 0x00C7}, //FINE_CORRECTION4
+{0x30FE, 0x0040}, //NOISE_PEDESTAL
+{0x3180, 0x0188}, //DELTA_DK_CONTROL
+{0x3108, 0x0CB1}, //DLO_CONTROL4
+{0x3280, 0x0CB2}, //T1_BARRIER_C0
+{0x3282, 0x0CB2}, //T1_BARRIER_C1
+{0x3284, 0x0CB2}, //T1_BARRIER_C2
+{0x3286, 0x0CB2}, //T1_BARRIER_C3
+{0x3288, 0x0226}, //T2_BARRIER_C0
+{0x328A, 0x0226}, //T2_BARRIER_C1
+{0x328C, 0x0226}, //T2_BARRIER_C2
+{0x328E, 0x0226}, //T2_BARRIER_C3
+{0x3290, 0x0CB2}, //T3_BARRIER_C0
+{0x3292, 0x0CB2}, //T3_BARRIER_C1
+{0x3294, 0x0CB2}, //T3_BARRIER_C2
+{0x3296, 0x0CB2}, //T3_BARRIER_C3
+{0x3298, 0x0ED8}, //T4_BARRIER_C0
+{0x329A, 0x0ED8}, //T4_BARRIER_C1
+{0x329C, 0x0ED8}, //T4_BARRIER_C2
+{0x329E, 0x0ED8}, //T4_BARRIER_C3
+{0x32F6, 0x3A01}, //SHUT_RS
+{0x32D2, 0x200A}, //SHUT_TX
+{0x32D0, 0x3005}, //SHUT_RST
+{0x32D4, 0x3505}, //SHUT_DCG
+{0x32F8, 0x3C03}, //SHUT_RS_BOOST
+{0x32DC, 0x220C}, //SHUT_TX_BOOST
+{0x32D6, 0x3207}, //SHUT_RST_BOOST
+{0x32E2, 0x3707}, //SHUT_DCG_BOOST
+{0x3260, 0x00FF}, //SHUT_AB
+{0x3262, 0x00FF}, //SHUT_AB_BOOST
+{0x32EA, 0x3C69}, //SHUT_CTRL
+{0x3250, 0x0005}, //LFM_AB_CTRL
+{0x3256, 0x03E8}, //LFM_AB_PULSE
+{0x3258, 0x0300}, //LFM_TX_CTRL
+{0x325A, 0x0A13}, //LFM_TX_CTRL2
+{0x325E, 0x0186}, //LFM_EXP_FINE
+{0x3252, 0x0107}, //LFM_AB_CTRL2
+{0x325E, 0x0186}, //LFM_EXP_FINE
+{0x3752, 0x0000}, //ROW_NOISE_ADJUST_2X_LCG_T1
+{0x3372, 0xF50F}, //DBLC_FS0_CONTROL
+{0x337A, 0x100E}, //DBLC_SCALE0
+{0x3504, 0x9100}, //DAC_LD_4_5
+{0x350C, 0x034A}, //DAC_LD_12_13
+{0x350E, 0x051C}, //DAC_LD_14_15
+{0x3510, 0x9753}, //DAC_LD_16_17
+{0x351E, 0x0100}, //DAC_LD_30_31
+{0x3520, 0x0800}, //DAC_LD_32_33
+{0x3522, 0x0008}, //DAC_LD_34_35
+{0x3524, 0x0C00}, //DAC_LD_36_37
+{0x3526, 0x0F00}, //DAC_LD_38_39
+{0x3528, 0xDDDD}, //DAC_LD_40_41
+{0x352A, 0x089F}, //DAC_LD_42_43
+{0x352C, 0x0012}, //DAC_LD_44_45
+{0x352E, 0x00FF}, //DAC_LD_46_47
+{0x3530, 0xFF00}, //DAC_LD_48_49
+{0x3532, 0x8F08}, //DAC_LD_50_51
+{0x3536, 0xFF38}, //DAC_LD_54_55
+{0x3538, 0x24FF}, //DAC_LD_56_57
+{0x353A, 0x9000}, //DAC_LD_58_59
+{0x353C, 0x7F00}, //DAC_LD_60_61
+{0x353E, 0x801F}, //DAC_LD_62_63
+{0x3540, 0xC62C}, //DAC_LD_64_65
+{0x3542, 0x4B4B}, //DAC_LD_66_67
+{0x3544, 0x4B46}, //DAC_LD_68_69
+{0x3546, 0x5A5A}, //DAC_LD_70_71
+{0x3548, 0x6400}, //DAC_LD_72_73
+{0x354A, 0x007F}, //DAC_LD_74_75
+{0x354E, 0x1480}, //DAC_LD_78_79
+{0x3554, 0x1599}, //DAC_LD_84_85
+{0x355A, 0x0B0E}, //DAC_LD_90_91
+{0x3364, 0x0004}, //DCG_TRIM
+{0x3F72, 0x0A08}, //GCF_TRIM_0
+{0x3F76, 0x0E09}, //GCF_TRIM_2
+{0x3F78, 0x0210}, //GCF_TRIM_3
+{0x3116, 0x0001}, //HDR_CONTROL3
+{0x3100, 0xE007}, //DLO_CONTROL0
+{0x3102, 0x8FA0}, //DLO_CONTROL1
+{0x3104, 0x8FA0}, //DLO_CONTROL2
+{0x3106, 0x9400}, //DLO_CONTROL3
+{0x312A, 0x83E8}, //HDR_SE_CONTROL0
+{0x3C82, 0x4FFF}, //HDR_SE_CONTROL1
+{0x3F7A, 0x01D6}, //DLO_CONTROL5
+{0x3F7C, 0x00C8}, //DLO_CONTROL6
+{0x302A, 0x0009}, //VT_PIX_CLK_DIV = 9
+{0x302C, 0x0001}, //VT_SYS_CLK_DIV = 1
+{0x302E, 0x0003}, //PRE_PLL_CLK_DIV = 3
+{0x3030, 0x0032}, //PLL_MULTIPLIER = 50
+{0x3036, 0x0009}, //OP_WORD_CLK_DIV = 9
+{0x3038, 0x0001}, //OP_SYS_CLK_DIV = 1
+{0x30B0, 0x980E}, //DIGITAL_TEST
+{0x31DC, 0x1FB8}, //PLL_CONTROL
+{0x30A2, 0x0001}, //X_ODD_INC_
+{0x30A6, 0x0001}, //Y_ODD_INC_
+{0x3040, 0x0004}, //READ_MODE              //3/29/2021, Remove repetitive overwirting and not using emebeded stats rows
+{0x3082, 0x0008}, //OPERATION_MODE_CTRL    //3/29/2021, Remove repetitive overwirting
+{0x3044, 0x0400}, //DARK_CONTROL           //3/29/2021, Remove repetitive overwirting
+{0x3064, 0x0100}, //SMIA_TEST              //3/29/2021, enable embedded data        
+{0x3180, 0x0188}, //DELTA_DK_CONTROL
+{0x33E4, 0x0080}, //VERT_SHADING_CONTROL
+{0x3004, 0x0020}, //X_ADDR_START_
+{0x3008, 0x051F}, //X_ADDR_END_
+{0x3002, 0x0004}, //Y_ADDR_START_
+{0x3006, 0x03C3}, //Y_ADDR_END_
+{0x3400, 0x0010}, //SCALE_M
+{0x3402, 0x0A80}, //X_OUTPUT_CONTROL       //3/29/2021, Remove repetitive overwirting
+{0x3404, 0x0790}, //Y_OUTPUT_CONTROL       //3/29/2021, Remove repetitive overwirting
+{0x3082, 0x000C}, //OPERATION_MODE_CTRL
+{0x30BA, 0x1003}, //DIGITAL_CTRL
+{0x300C, 0x0688}, //LINE_LENGTH_PCK_
+{0x300A, 0x03FE}, //FRAME_LENGTH_LINES_   
+{0x3042, 0x0000}, //EXTRA_DELAY
+{0x3012, 0x03E8}, //COARSE_INTEGRATION_TIME_   
+{0x321A, 0x000C}, //COARSE_INTEGRATION_TIME4
+{0x3238, 0x8777}, //EXPOSURE_RATIO         //3/29/2021, Remove repetitive overwirting
+{0x322A, 0x0939}, //FINE_INTEGRATION_CTRL
+{0x3014, 0x0271}, //FINE_INTEGRATION_TIME_
+{0x3226, 0x0596}, //FINE_INTEGRATION_TIME4
+{0x3362, 0x0D02}, //DC_GAIN
+{0x3366, 0xDE79}, //ANALOG_GAIN
+{0x30B0, 0x980E}, //DIGITAL_TEST
+{0x32EC, 0x7107}, //SHUT_CTRL2
+{0x33E0, 0x0080}, //TEST_ASIL_ROWS
+{0x31D0, 0x0001}, //COMPANDING            //3/29/2021, Remove repetitive overwirting
+{0x31AE, 0x0001}, //SERIAL_FORMAT         //3/29/2021, Remove repetitive overwirting
+{0x31AC, 0x140C}, //DATA_FORMAT_BITS      //3/29/2021, Remove repetitive overwirting
+{AR0147_DELAY, 950}, // based on testing, R0x3500 write need 950ms delay
+#if 1 /* patch */
+{0x31B0, 0x0006}, // FRAME_PREAMBLE
+#endif
+{0x301A, 0x10DC}, //RESET_REGISTER        //3/29/2021, Remove repetitive overwirting
+{ }
+};
+
+/* Super-Exposure + T2 Full Resolution Parallel 50MHz PixClk 29.4FPS 27MHz Extclk */
+static const struct ar0147_reg *ar0147_regs_setup_custom[] = {
+	ar0147_rev3_setup_dvp_custom,
+	NULL
+};
-- 
2.7.4
